precision mediump float;
uniform sampler2D uCamTexture;
varying mediump vec2 vCamTextureCoord;
const float maxdelta = 0.08;
uniform mediump float xStep;
uniform mediump float yStep;
const mediump mat3 rgb2yuv = mat3(0.299,-0.147,0.615,0.587,-0.289,-0.515,0.114,0.436,-0.1);
const mediump mat3 gaussianMap = mat3(0.142,0.131,0.104,0.131,0.122,0.096,0.104,0.096,0.075);
mediump vec2 blurCoordinates[25];
mediump vec4 color2[25];
mediump vec4 diff[25];
mediump vec4 isBlur[25];

void main(){
    vec4 color = texture2D(uCamTexture,vCamTextureCoord);
    vec3 yuv = rgb2yuv*color.rgb;
    if(yuv.g<-0.225 || yuv.g>0.0 || yuv.b<0.022 || yuv.b>0.206){
        gl_FragColor = color;
        return;
    }
    vec4 sum=vec4(0.0,0.0,0.0,0.0);
    vec4 fact=vec4(0.0,0.0,0.0,0.0);
    //vec2 blurCoordinates;
    //vec4 color2;
    //vec4 diff;
    //vec4 isBlur;
    vec4 tmp;
    vec2 stepVec = vec2(xStep, yStep);

blurCoordinates[0]  = vCamTextureCoord.xy + stepVec * vec2(-2.0, -2.0);
color2[0] = texture2D(uCamTexture, blurCoordinates[0]);
diff[0] = color - texture2D(uCamTexture, blurCoordinates[0]);
isBlur[0] = step(abs(diff[0]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[0] * (isBlur[0] * gaussianMap[2][2]);
fact += isBlur[0] * gaussianMap[2][2];
blurCoordinates[1]  = vCamTextureCoord.xy + stepVec * vec2(-1.0, -2.0);
color2[1] = texture2D(uCamTexture, blurCoordinates[1]);
diff[1] = color - texture2D(uCamTexture, blurCoordinates[1]);
isBlur[1] = step(abs(diff[1]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[1] * (isBlur[1] * gaussianMap[1][2]);
fact += isBlur[1] * gaussianMap[1][2];
blurCoordinates[2]  = vCamTextureCoord.xy + stepVec * vec2(0.0, -2.0);
color2[2] = texture2D(uCamTexture, blurCoordinates[2]);
diff[2] = color - texture2D(uCamTexture, blurCoordinates[2]);
isBlur[2] = step(abs(diff[2]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[2] * (isBlur[2] * gaussianMap[0][2]);
fact += isBlur[2] * gaussianMap[0][2];
blurCoordinates[3]  = vCamTextureCoord.xy + stepVec * vec2(1.0, -2.0);
color2[3] = texture2D(uCamTexture, blurCoordinates[3]);
diff[3] = color - texture2D(uCamTexture, blurCoordinates[3]);
isBlur[3] = step(abs(diff[3]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[3] * (isBlur[3] * gaussianMap[1][2]);
fact += isBlur[3] * gaussianMap[1][2];
blurCoordinates[4]  = vCamTextureCoord.xy + stepVec * vec2(2.0, -2.0);
color2[4] = texture2D(uCamTexture, blurCoordinates[4]);
diff[4] = color - texture2D(uCamTexture, blurCoordinates[4]);
isBlur[4] = step(abs(diff[4]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[4] * (isBlur[4] * gaussianMap[2][2]);
fact += isBlur[4] * gaussianMap[2][2];
blurCoordinates[5]  = vCamTextureCoord.xy + stepVec * vec2(-2.0, -1.0);
color2[5] = texture2D(uCamTexture, blurCoordinates[5]);
diff[5] = color - texture2D(uCamTexture, blurCoordinates[5]);
isBlur[5] = step(abs(diff[5]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[5] * (isBlur[5] * gaussianMap[2][1]);
fact += isBlur[5] * gaussianMap[2][1];
blurCoordinates[6]  = vCamTextureCoord.xy + stepVec * vec2(-1.0, -1.0);
color2[6] = texture2D(uCamTexture, blurCoordinates[6]);
diff[6] = color - texture2D(uCamTexture, blurCoordinates[6]);
isBlur[6] = step(abs(diff[6]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[6] * (isBlur[6] * gaussianMap[1][1]);
fact += isBlur[6] * gaussianMap[1][1];
blurCoordinates[7]  = vCamTextureCoord.xy + stepVec * vec2(0.0, -1.0);
color2[7] = texture2D(uCamTexture, blurCoordinates[7]);
diff[7] = color - texture2D(uCamTexture, blurCoordinates[7]);
isBlur[7] = step(abs(diff[7]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[7] * (isBlur[7] * gaussianMap[0][1]);
fact += isBlur[7] * gaussianMap[0][1];
blurCoordinates[8]  = vCamTextureCoord.xy + stepVec * vec2(1.0, -1.0);
color2[8] = texture2D(uCamTexture, blurCoordinates[8]);
diff[8] = color - texture2D(uCamTexture, blurCoordinates[8]);
isBlur[8] = step(abs(diff[8]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[8] * (isBlur[8] * gaussianMap[1][1]);
fact += isBlur[8] * gaussianMap[1][1];
blurCoordinates[9]  = vCamTextureCoord.xy + stepVec * vec2(2.0, -1.0);
color2[9] = texture2D(uCamTexture, blurCoordinates[9]);
diff[9] = color - texture2D(uCamTexture, blurCoordinates[9]);
isBlur[9] = step(abs(diff[9]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[9] * (isBlur[9] * gaussianMap[2][1]);
fact += isBlur[9] * gaussianMap[2][1];
blurCoordinates[10]  = vCamTextureCoord.xy + stepVec * vec2(-2.0, 0.0);
color2[10] = texture2D(uCamTexture, blurCoordinates[10]);
diff[10] = color - texture2D(uCamTexture, blurCoordinates[10]);
isBlur[10] = step(abs(diff[10]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[10] * (isBlur[10] * gaussianMap[2][0]);
fact += isBlur[10] * gaussianMap[2][0];
blurCoordinates[11]  = vCamTextureCoord.xy + stepVec * vec2(-1.0, 0.0);
color2[11] = texture2D(uCamTexture, blurCoordinates[11]);
diff[11] = color - texture2D(uCamTexture, blurCoordinates[11]);
isBlur[11] = step(abs(diff[11]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[11] * (isBlur[11] * gaussianMap[1][0]);
fact += isBlur[11] * gaussianMap[1][0];
blurCoordinates[12]  = vCamTextureCoord.xy + stepVec * vec2(0.0, 0.0);
color2[12] = texture2D(uCamTexture, blurCoordinates[12]);
diff[12] = color - texture2D(uCamTexture, blurCoordinates[12]);
isBlur[12] = step(abs(diff[12]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[12] * (isBlur[12] * gaussianMap[0][0]);
fact += isBlur[12] * gaussianMap[0][0];
blurCoordinates[13]  = vCamTextureCoord.xy + stepVec * vec2(1.0, 0.0);
color2[13] = texture2D(uCamTexture, blurCoordinates[13]);
diff[13] = color - texture2D(uCamTexture, blurCoordinates[13]);
isBlur[13] = step(abs(diff[13]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[13] * (isBlur[13] * gaussianMap[1][0]);
fact += isBlur[13] * gaussianMap[1][0];
blurCoordinates[14]  = vCamTextureCoord.xy + stepVec * vec2(2.0, 0.0);
color2[14] = texture2D(uCamTexture, blurCoordinates[14]);
diff[14] = color - texture2D(uCamTexture, blurCoordinates[14]);
isBlur[14] = step(abs(diff[14]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[14] * (isBlur[14] * gaussianMap[2][0]);
fact += isBlur[14] * gaussianMap[2][0];
blurCoordinates[15]  = vCamTextureCoord.xy + stepVec * vec2(-2.0, 1.0);
color2[15] = texture2D(uCamTexture, blurCoordinates[15]);
diff[15] = color - texture2D(uCamTexture, blurCoordinates[15]);
isBlur[15] = step(abs(diff[15]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[15] * (isBlur[15] * gaussianMap[2][1]);
fact += isBlur[15] * gaussianMap[2][1];
blurCoordinates[16]  = vCamTextureCoord.xy + stepVec * vec2(-1.0, 1.0);
color2[16] = texture2D(uCamTexture, blurCoordinates[16]);
diff[16] = color - texture2D(uCamTexture, blurCoordinates[16]);
isBlur[16] = step(abs(diff[16]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[16] * (isBlur[16] * gaussianMap[1][1]);
fact += isBlur[16] * gaussianMap[1][1];
blurCoordinates[17]  = vCamTextureCoord.xy + stepVec * vec2(0.0, 1.0);
color2[17] = texture2D(uCamTexture, blurCoordinates[17]);
diff[17] = color - texture2D(uCamTexture, blurCoordinates[17]);
isBlur[17] = step(abs(diff[17]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[17] * (isBlur[17] * gaussianMap[0][1]);
fact += isBlur[17] * gaussianMap[0][1];
blurCoordinates[18]  = vCamTextureCoord.xy + stepVec * vec2(1.0, 1.0);
color2[18] = texture2D(uCamTexture, blurCoordinates[18]);
diff[18] = color - texture2D(uCamTexture, blurCoordinates[18]);
isBlur[18] = step(abs(diff[18]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[18] * (isBlur[18] * gaussianMap[1][1]);
fact += isBlur[18] * gaussianMap[1][1];
blurCoordinates[19]  = vCamTextureCoord.xy + stepVec * vec2(2.0, 1.0);
color2[19] = texture2D(uCamTexture, blurCoordinates[19]);
diff[19] = color - texture2D(uCamTexture, blurCoordinates[19]);
isBlur[19] = step(abs(diff[19]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[19] * (isBlur[19] * gaussianMap[2][1]);
fact += isBlur[19] * gaussianMap[2][1];
blurCoordinates[20]  = vCamTextureCoord.xy + stepVec * vec2(-2.0, 2.0);
color2[20] = texture2D(uCamTexture, blurCoordinates[20]);
diff[20] = color - texture2D(uCamTexture, blurCoordinates[20]);
isBlur[20] = step(abs(diff[20]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[20] * (isBlur[20] * gaussianMap[2][2]);
fact += isBlur[20] * gaussianMap[2][2];
blurCoordinates[21]  = vCamTextureCoord.xy + stepVec * vec2(-1.0, 2.0);
color2[21] = texture2D(uCamTexture, blurCoordinates[21]);
diff[21] = color - texture2D(uCamTexture, blurCoordinates[21]);
isBlur[21] = step(abs(diff[21]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[21] * (isBlur[21] * gaussianMap[1][2]);
fact += isBlur[21] * gaussianMap[1][2];
blurCoordinates[22]  = vCamTextureCoord.xy + stepVec * vec2(0.0, 2.0);
color2[22] = texture2D(uCamTexture, blurCoordinates[22]);
diff[22] = color - texture2D(uCamTexture, blurCoordinates[22]);
isBlur[22] = step(abs(diff[22]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[22] * (isBlur[22] * gaussianMap[0][2]);
fact += isBlur[22] * gaussianMap[0][2];
blurCoordinates[23]  = vCamTextureCoord.xy + stepVec * vec2(1.0, 2.0);
color2[23] = texture2D(uCamTexture, blurCoordinates[23]);
diff[23] = color - texture2D(uCamTexture, blurCoordinates[23]);
isBlur[23] = step(abs(diff[23]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[23] * (isBlur[23] * gaussianMap[1][2]);
fact += isBlur[23] * gaussianMap[1][2];
blurCoordinates[24]  = vCamTextureCoord.xy + stepVec * vec2(2.0, 2.0);
color2[24] = texture2D(uCamTexture, blurCoordinates[24]);
diff[24] = color - texture2D(uCamTexture, blurCoordinates[24]);
isBlur[24] = step(abs(diff[24]), vec4(maxdelta, maxdelta, maxdelta, maxdelta));
sum += color2[24] * (isBlur[24] * gaussianMap[2][2]);
fact += isBlur[24] * gaussianMap[2][2];

    vec4 res = sum/fact;

    if(fact.r<1.0){
        tmp.r = color.r;
    }else{
        tmp.r = res.r;
    }
    if(fact.g<1.0){
        tmp.g = color.g;
    }else{
        tmp.g = res.g;
    }
    if(fact.b<1.0){
        tmp.b = color.b;
    }else{
        tmp.b = res.b;
    }
    gl_FragColor = vec4(tmp.rgb,1.0);

}
