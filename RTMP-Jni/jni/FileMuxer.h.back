#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "libavutil/opt.h"
#include "libavutil/mathematics.h"
#include "libavformat/avformat.h"
#include "libswscale/swscale.h"
#include "libswresample/swresample.h"

/* 5 seconds stream duration */
#define STREAM_DURATION   200.0
#define STREAM_FRAME_RATE 25 /* 25 images/s */
#define STREAM_NB_FRAMES  ((int)(STREAM_DURATION * STREAM_FRAME_RATE))
#define STREAM_PIX_FMT    AV_PIX_FMT_YUV420P /* default pix_fmt */

#define RECORD_INIT_PTS -12345
#define PackageName(a) Java_com_XXX_##a
#define HANDLER_CHECK_AND_CAST if(0 >= nHandler) return ERROR_POINTER; \
									   MuxerHandler *handler = (MuxerHandler*)nHandler;

#define ERROR_NONE 0 
#define ERROR_UNKNOWN -1
#define ERROR_POINTER -2
#define ERROR_MEMORY -3
#define ERROR_FFMPEG_INIT -4
#define ERROR_JAVA_ENV -5

static int sws_flags = SWS_BICUBIC;

typedef struct AudioInfo {
	int codecID;
	int bitrate;
	int samplerate;
	int samplebit;
	int channels;
}AudioInfo;

typedef struct SPSPPSInfo {
	uint8_t *sps;
	uint8_t *pps;
	int ppsLen;
	int spsLen;
}SPSPPSInfo;

typedef struct VideoInfo {
	int codecID;
	int bitrate;
	int width;
	int height;
	float fps;
	int gopsize;
}VideoInfo;

typedef struct MuxerHandler {
	SPSPPSInfo spsppsInfo;	
	AudioInfo audioInfo;
	VideoInfo videoInfo;
	AVOutputFormat *fmt;
	AVFormatContext *oc;
	AVStream *audio_st;
	AVStream *video_st;
	AVCodec *audio_codec;
    AVCodec	*video_codec;
	long long audioStartPTS;
	long long videoStartPTS;
	bool fileHeaderWrited;
	bool videoKeyframeArrived;
}MuxerHandler;

long long FileMuxerInit(void);
int FileMuxerUninit(long long nHandler);

int FileMuxerOpen(long long nHandler, const char *path);
int FileMuxerClose(long long nHandler);

int FileMuxerSetAudioParameter(long long nHandler, int codecID, int bitrate, int samplerate, int samplebit, int channels);
int FileMuxerSetVideoParameter(long long nHandler, int codecID, int bitrate, int width, int height, float fps, int gopsize);
int FileMuxerSetSPSPPS(long long nHandler, uint8_t *sps, uint8_t *pps, int spsLen, int ppsLen);
int FileMuxerInputAudioSample(long long nHandler, uint8_t *data, int size, long long pts, long long dts);
int FileMuxerInputVideoSample(long long nHandler, uint8_t *data, int size, long long pts, long long dts, bool keyframe);

//// *********** Private *************** ////
static AVStream *CreateOutputStream(MuxerHandler *Handler, int streamType);

//// ********** Block *************** ////
#ifndef __USER_BLOCK__
#define __USER_BLOCK__
#endif // __USER_BLOCK__
extern bool needBlocked;
